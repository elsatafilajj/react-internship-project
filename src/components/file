// return (
//   <Popover open={isOpen} onOpenChange={setIsOpen}>
//     <PopoverTrigger asChild>
//       <div className="relative flex flex-col items-center">
//         <div
//           ref={noteRef}
//           onClick={(e) => {
//             if (
//               (e.target as HTMLElement).tagName.toLowerCase() !== 'textarea'
//             ) {
//               setIsOpen(true);
//             }
//           }}
//           style={{
//             width: `${noteSize.width}px`,
//             height: `${noteSize.height}px`,
//             position: 'relative',
//           }}
//           className={clsx(
//             noteColorClassMap[
//               localNoteColor as keyof typeof noteColorClassMap
//             ],
//             'rounded-md shadow-md border p-2 text-xs cursor-pointer',
//             selectedNoteId === uuid &&
//               'ring-4 ring-primary/60 shadow-xl scale-[1.02] z-20 animate-pulse-slow',
//             isWinner && 'ring-1 ring-yellow-400',
//           )}
//         >
//           <textarea
//             readOnly={isReadOnly}
//             value={noteContent}
//             onChange={handleNoteContentChange}
//             placeholder="Type in your idea..."
//             className="resize-none w-full h-full text-sm bg-transparent border-none outline-none text-muted-foreground"
//             aria-label="Note input"
//           />
//           <div className="flex justify-between items-center mt-1">
//             <span className="text-muted-foreground text-xs">
//               {author?.firstName || 'Unknown'}
//             </span>
//             <div className="flex gap-2">
//               <span
//                 className="text-[11px] font-medium text-blue-800 bg-blue-100 px-2 py-0.5 rounded-full flex items-center gap-1"
//                 title="Total comments"
//               >
//                 <MessageSquare className="w-3 h-3 text-blue-500 fill-blue-300" />
//                 3
//               </span>
//               {(note.totalVotes ?? 0) > 0 && (
//                 <span
//                   className="text-[11px] font-medium text-yellow-800 bg-yellow-100 px-2 py-0.5 rounded-full flex items-center gap-1"
//                   title="Total votes"
//                 >
//                   <Star className="w-3 h-3 text-yellow-500 fill-yellow-300" />
//                   {note.totalVotes}
//                 </span>
//               )}
//             </div>
//             <div
//               className="cursor-se-resize  p-3 border-red-500 w-[100px] z-30 absolute h-[100px]"
//               onClick={() => setIsResizing(true)}
//             >
//               hi
//               {/* <SquareArrowOutDownRight /> */}
//             </div>
//           </div>
//           {isWinner && (
//             <div className="absolute top-[-12px] right-[-12px] z-50">
//               <Crown className="w-6 h-6 text-yellow-400 drop-shadow-lg" />
//             </div>
//           )}
//         </div>
//       </div>
//     </PopoverTrigger>

//     <PopoverContent side="top" align="end" sideOffset={10}>
//       <div className="flex items-center gap-3">
//         <TooltipProvider>
//           <Tooltip>
//             <TooltipTrigger>
//               <X
//                 className="cursor-pointer"
//                 size={20}
//                 strokeWidth={2.5}
//                 onClick={() => !isReadOnly && handleDeleteNote(uuid)}
//               />
//             </TooltipTrigger>
//             <TooltipContent>Delete</TooltipContent>
//           </Tooltip>
//         </TooltipProvider>

//         {fillColors.map((color) => (
//           <Circle
//             key={color}
//             className={clsx(
//               'w-4 h-4 cursor-pointer',
//               localNoteColor === color && 'ring-2 ring-primary rounded-full',
//             )}
//             strokeWidth={2.5}
//             style={{ fill: `var(--${color})` }}
//             onClick={() => !isReadOnly && handleNoteColorChange(color)}
//           />
//         ))}

//         <TooltipProvider>
//           <Tooltip>
//             <TooltipTrigger>
//               <div className="flex flex-col items-center">
//                 <Toggle
//                   size="sm"
//                   variant="ghost"
//                   className="cursor-pointer py-2"
//                   onClick={() => !isReadOnly && handleVote()}
//                 >
//                   {hasVoted ? (
//                     <Star className="fill-foreground" />
//                   ) : (
//                     <Star strokeWidth={2.5} />
//                   )}
//                 </Toggle>
//                 <p className="text-xs font-semibold">
//                   {note.totalVotes || 0}
//                 </p>
//               </div>
//             </TooltipTrigger>
//             <TooltipContent>Vote / Unvote</TooltipContent>
//           </Tooltip>
//         </TooltipProvider>

//         <PanelToggle noteId={uuid} />
//       </div>
//     </PopoverContent>
//   </Popover>
// );
// };
